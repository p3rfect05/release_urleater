// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "urleater/dto"

	mock "github.com/stretchr/testify/mock"
)

// RedisStorage is an autogenerated mock type for the RedisStorage type
type RedisStorage struct {
	mock.Mock
}

// DeleteLongLinkByShortLink provides a mock function with given fields: ctx, shortLink
func (_m *RedisStorage) DeleteLongLinkByShortLink(ctx context.Context, shortLink string) error {
	ret := _m.Called(ctx, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLongLinkByShortLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortLink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShortLinkByLongLink provides a mock function with given fields: ctx, shortLink
func (_m *RedisStorage) GetShortLinkByLongLink(ctx context.Context, shortLink string) (*dto.Link, error) {
	ret := _m.Called(ctx, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for GetShortLinkByLongLink")
	}

	var r0 *dto.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.Link, error)); ok {
		return rf(ctx, shortLink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.Link); ok {
		r0 = rf(ctx, shortLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveShortLinkToLongLink provides a mock function with given fields: ctx, link
func (_m *RedisStorage) SaveShortLinkToLongLink(ctx context.Context, link dto.Link) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for SaveShortLinkToLongLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Link) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisStorage creates a new instance of RedisStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisStorage {
	mock := &RedisStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
