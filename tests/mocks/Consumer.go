// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "urleater/dto"

	kafkaProducerConsumer "urleater/internal/repository/kafka"

	mock "github.com/stretchr/testify/mock"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// GetConfig provides a mock function with given fields:
func (_m *Consumer) GetConfig() kafkaProducerConsumer.KafkaConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 kafkaProducerConsumer.KafkaConfig
	if rf, ok := ret.Get(0).(func() kafkaProducerConsumer.KafkaConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kafkaProducerConsumer.KafkaConfig)
	}

	return r0
}

// GetWorkerChannel provides a mock function with given fields:
func (_m *Consumer) GetWorkerChannel() chan dto.ConsumerData {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkerChannel")
	}

	var r0 chan dto.ConsumerData
	if rf, ok := ret.Get(0).(func() chan dto.ConsumerData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan dto.ConsumerData)
		}
	}

	return r0
}

// StartConsuming provides a mock function with given fields: ctx
func (_m *Consumer) StartConsuming(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartConsuming")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
