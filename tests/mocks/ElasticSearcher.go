// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ElasticSearcher is an autogenerated mock type for the ElasticSearcher type
type ElasticSearcher struct {
	mock.Mock
}

// AddShortLink provides a mock function with given fields: ctx, link
func (_m *ElasticSearcher) AddShortLink(ctx context.Context, link string) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for AddShortLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShortLink provides a mock function with given fields: ctx, link
func (_m *ElasticSearcher) DeleteShortLink(ctx context.Context, link string) error {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchShortLinks provides a mock function with given fields: ctx, word, offset, limit
func (_m *ElasticSearcher) SearchShortLinks(ctx context.Context, word string, offset int, limit int) ([]string, error) {
	ret := _m.Called(ctx, word, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for SearchShortLinks")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]string, error)); ok {
		return rf(ctx, word, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []string); ok {
		r0 = rf(ctx, word, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, word, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewElasticSearcher creates a new instance of ElasticSearcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewElasticSearcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *ElasticSearcher {
	mock := &ElasticSearcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
