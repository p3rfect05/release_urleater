// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "urleater/dto"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PostgresStorage is an autogenerated mock type for the PostgresStorage type
type PostgresStorage struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, email, password
func (_m *PostgresStorage) ChangePassword(ctx context.Context, email string, password string) error {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateShortLink provides a mock function with given fields: ctx, shortLink, longLink, userID
func (_m *PostgresStorage) CreateShortLink(ctx context.Context, shortLink string, longLink string, userID string) (*dto.Link, error) {
	ret := _m.Called(ctx, shortLink, longLink, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortLink")
	}

	var r0 *dto.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dto.Link, error)); ok {
		return rf(ctx, shortLink, longLink, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dto.Link); ok {
		r0 = rf(ctx, shortLink, longLink, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, shortLink, longLink, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscriptions provides a mock function with given fields: ctx
func (_m *PostgresStorage) CreateSubscriptions(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscriptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, email, password
func (_m *PostgresStorage) CreateUser(ctx context.Context, email string, password string) error {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShortLink provides a mock function with given fields: ctx, shortLink
func (_m *PostgresStorage) DeleteShortLink(ctx context.Context, shortLink string) error {
	ret := _m.Called(ctx, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortLink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExtendShortLink provides a mock function with given fields: ctx, shortLink, expiresAt
func (_m *PostgresStorage) ExtendShortLink(ctx context.Context, shortLink string, expiresAt time.Time) (*dto.Link, error) {
	ret := _m.Called(ctx, shortLink, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for ExtendShortLink")
	}

	var r0 *dto.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (*dto.Link, error)); ok {
		return rf(ctx, shortLink, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *dto.Link); ok {
		r0 = rf(ctx, shortLink, expiresAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, shortLink, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortLink provides a mock function with given fields: ctx, shortLink
func (_m *PostgresStorage) GetShortLink(ctx context.Context, shortLink string) (*dto.Link, error) {
	ret := _m.Called(ctx, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for GetShortLink")
	}

	var r0 *dto.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.Link, error)); ok {
		return rf(ctx, shortLink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.Link); ok {
		r0 = rf(ctx, shortLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptions provides a mock function with given fields: ctx
func (_m *PostgresStorage) GetSubscriptions(ctx context.Context) ([]dto.Subscription, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptions")
	}

	var r0 []dto.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.Subscription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.Subscription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalUserLinksNumber provides a mock function with given fields: ctx, email
func (_m *PostgresStorage) GetTotalUserLinksNumber(ctx context.Context, email string) (int, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalUserLinksNumber")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, email
func (_m *PostgresStorage) GetUser(ctx context.Context, email string) (*dto.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserShortLinksWithOffsetAndLimit provides a mock function with given fields: ctx, email, offset, limit
func (_m *PostgresStorage) GetUserShortLinksWithOffsetAndLimit(ctx context.Context, email string, offset int, limit int) ([]dto.Link, error) {
	ret := _m.Called(ctx, email, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetUserShortLinksWithOffsetAndLimit")
	}

	var r0 []dto.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]dto.Link, error)); ok {
		return rf(ctx, email, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []dto.Link); ok {
		r0 = rf(ctx, email, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, email, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementShortLinkTimesWatchedCount provides a mock function with given fields: ctx, shortLink
func (_m *PostgresStorage) IncrementShortLinkTimesWatchedCount(ctx context.Context, shortLink string) error {
	ret := _m.Called(ctx, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for IncrementShortLinkTimesWatchedCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortLink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserLinks provides a mock function with given fields: ctx, email, newUrlsNumber
func (_m *PostgresStorage) UpdateUserLinks(ctx context.Context, email string, newUrlsNumber int) (*dto.User, error) {
	ret := _m.Called(ctx, email, newUrlsNumber)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserLinks")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (*dto.User, error)); ok {
		return rf(ctx, email, newUrlsNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *dto.User); ok {
		r0 = rf(ctx, email, newUrlsNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, email, newUrlsNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyUserPassword provides a mock function with given fields: ctx, email, password
func (_m *PostgresStorage) VerifyUserPassword(ctx context.Context, email string, password string) error {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostgresStorage creates a new instance of PostgresStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgresStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgresStorage {
	mock := &PostgresStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
